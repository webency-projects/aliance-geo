name: alliance-geo

services:
  geo_backend_api:
    container_name: geo_backend_api
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CELERY_BROKER=redis://geo_redis:6379/0
      - CELERY_BACKEND=redis://geo_redis:6379/0
    depends_on:
      kafka:
        condition: service_healthy
      geo_postgres_db:
        condition: service_healthy
      geo_redis:
        condition: service_healthy
    networks:
      - geo-network

  geo_kafka_consumer:
    container_name: geo_kafka_consumer
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python manage.py consume_messages
    volumes:
      - ./backend:/app
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CELERY_BROKER=redis://geo_redis:6379/0
      - CELERY_BACKEND=redis://geo_redis:6379/0
    depends_on:
      kafka:
        condition: service_healthy
      geo_postgres_db:
        condition: service_healthy
    networks:
      - geo-network
  
  coordinate_processor:
    container_name: geo_coordinate_processor
    build:
      context: ./coordinate_processor
      dockerfile: Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - geo-network

  geo_redis:
    image: redis:latest
    container_name: geo-redis
    ports:
      - "6379"
    networks:
      - geo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      retries: 100

  # geo_celery:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: celery_worker
  #   command: celery -A config.celery_app worker --loglevel=info
  #   environment:
  #     - CELERY_BROKER=redis://geo_redis:6379/0
  #     - CELERY_BACKEND=redis://geo_redis:6379/0
  #   depends_on:
  #     - geo_redis
  #     - geo_backend_api
  #   networks:
  #     - geo-network

  geo_postgres_db:
    container_name: geo_postgres_db
    image: postgis/postgis
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=geo_db
    ports:
      - "6666:5432"
    volumes:
      - geo_db-data:/var/lib/postgresql/data
    networks:
      - geo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - geo-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - geo-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  


volumes:
  geo_db-data:

networks:
  geo-network:
    driver: bridge